[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "fourier-modal-method-torch"
version = "0.1.0"
description = "A PyTorch-based optical simulation tool implementing the Fourier Modal Method."
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
authors = [
  { name="Your Name", email="your.email@example.com" }, # TODO: Replace with actual author info
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License", # Assuming MIT License based on existing LICENSE file
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dependencies = [
  "torch",
]

[project.optional-dependencies]
dev = [
  "ruff",
  "mypy",
  "pydocstyle[toml]", # Add [toml] to enable pydocstyle to read pyproject.toml
  "pytest",
  "setuptools", # Needed for build-system
  "wheel", # Needed for building wheels
]

[project.urls]
"Homepage" = "https://github.com/your-username/fourier-modal-method-torch" # TODO: Replace with actual URL
"Bug Tracker" = "https://github.com/your-username/fourier-modal-method-torch/issues" # TODO: Replace with actual URL

[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
line-length = 88
extend-include = ["*.ipynb"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C90", # mccabe complexity
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "ANN", # flake8-annotations
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "ISC", # flake8-implicit-str-concat
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "RUF", # Ruff-specific rules
]
ignore = ["ANN101", "ANN102", "ANN401"] # Example: ignore missing type hints for self, cls, and any
# D100: Missing docstring in public module
# D104: Missing docstring in public package
# D107: Missing docstring in __init__
# Consider adding these if you want to enforce docstrings everywhere from the start
ignore = ["D100", "D104", "D107"]


[tool.ruff.lint.pydocstyle]
convention = "numpy" # Or "google", "pep257"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Often useful for external libraries without stubs
# For stricter checking, consider these:
# disallow_untyped_defs = true
# disallow_any_unimported = true
# no_implicit_optional = true
# check_untyped_defs = true

[[tool.mypy.overrides]]
module = "torch.*"
ignore_missing_imports = true


[tool.pydocstyle]
convention = "numpy"
# Add other pydocstyle configurations if needed, e.g.:
# add_ignore = "D100,D104,D107"
# match = "(?!test_).*.py"
# match-dir = "(?!tests|docs).*"
